//1.18-1.20
程序注释完成，解压函数完成，高分一号WFV类和PMS类定义完成，记录日志函数完成

//1.21
readJSON函数完成，定标系数和中心波长的JSON文件编写完成

//1.27
高分六号wfv类定义完成，整合PMS类与高分一号BCD星PMS类，程序主体完成

//1.30
重构并优化重载RPC部分代码，分函数注释完成，PMS函数完成一部分

//1.31
重构判断矢量位置部分代码，完成选择合适PAN和MSS部分代码

//2.1
继续完成PMS函数部分，修复readJSON函数部分没有对应年份无返回值的bug
注意：若结果为tiff格式，则导出后需要添加波长信息

//2.3
欣赏代码，优化裁剪部分代码，修复了输出文件夹名称可能出错的问题，修复了输出文件夹可能存在的问题
-----考虑重构object，主要是对其过程文件名的定义进行修改，可以改为自增型矩阵，每次操作取最后一个元素，就不用每次再通过FILE_TEST来找之前的文件，并将其他信息info和flag一起合并进object-----object只存储信息-----unzip函数内容更改-----

//2.4
完成重构PMS的object，之后的一系列可能需要大的改动

//2.5
规范并整理一部分注释

//2.6
测试IDL下FILE_UNTAR函数解压时间和调用UNIX自带的tar命令解压时间，调用tar命令对tar.gz文件的解压速度明显优于FILE_UNTAR

//2.8
为了少传入参数，在主函数部分将object定义为全局变量

//2.10
pms主函数完成-----TODO:添加BCD星的波长-----

//2.11
pms函数小修，tiff转换函数完成，ndvi代码完成，classic函数进行融合代码完成，未官宣gf1bcd的光谱响应函数，暂时使用gf1的波长代替，开始working on gf1wfv的object，修复pms函数匹配BUG，优化pms的object-----TODO:考虑是否定义日志文件的全局变量-----

//2.12
加入日志记录部分，测试PMS数据，记录需要的DLM以便提前加载
-----DLM_LOAD, 'XML', 'SHAPEFILE', 'JPEG2000', 'JPEG', 'PNG', 'TIFF', 'GDAL', 'MAP_PE', 'NATIVE'-----

//2.13
修改测试出现的错误，添加注释，继续测试，gf1-PMS测试通过，尝试使用构建的sav再次运行

//2.14
gf1通过sav运行成功，测试多文件gf1c，gf2和gf6， /q/n/t测试通过，/r/q/s测试时发现ENVICoordSys函数版本问题，之后解决

//2.15
坐标问题，调试一天，/r/q/s测试通过

//2.16
修改后再次测试/q/n/t，测试通过，pmshandler所用函数需要结合wfv1handler稍作修改，对函数传入输入和输出参数

//2.17
学会使用shell脚本git push到GitHub

//2.18
hdr删除问题完全解决，导出TIFF存在warning，但不影响结果，优化日志中时间格式

//2.20
未正射校正时，无法根据矢量判断其是否在栅格内部，需要修改gf1bcd和gf6wfv的代码

//2.21
gf1c-rnt通过，gf6wfv应该是数据问题。push第一个预览版v0.1-alpha

//2.22
-----bug:unable to create enviraster发生于删除临时文件----- push v0.2-alpha

//2.24
-----输入：pms传感器/q/s，会遇到“段错误 (核心已转储)”，排查时发现在使用ENVIRaster的getdata方法时，会导致IDL异常退出，可能原因是bip格式导致，因为wfv传感器/q/s正常-----

//2.25
测试完成。push v0.3-alpha

//2.27
日志更改为只记录io，更改gf6wfv的裁剪拼接顺序

//2.28
调整：输出文件名若含有经纬度的小数点，hdr文件可能与元文件不对应。调整：不进行大气校正不会添加波长信息。push v0.4-alpha

//2.29
使用二进制方式代替ENVI接口进行辐射定标和NDVI计算

//3.1
更新RPC重定义的方法，新增建立金字塔的关键字。run脚本代替make脚本，使得可以直接在terminal调用idl解释器传参进行影像处理(而run脚本只是构建sav文件)，在win环境下，应该也可以通过在PS或cmd中调用安装路径的idlrt.exe作为解释器来运行脚本。-----时间格式有误，已更正-----

//3.2
测试run脚本，准备push正式版本v1.0。使用二进制方式代替ENVI接口进行储存方式转换和导出ENVI栅格为TIFF，并保留投影信息。同样是PMS的处理函数，gf12的二进制方式辐射定标不会出错，而gf6则会出现“已杀死”，可能原因是数据过大，电脑内存不足。提取出『读取二进制』和『写入二进制』函数。

//3.3
采用ENVI接口对gf6pms辐射定标则正常。gf6pms采用二进制方式进行『QUAC结果处以一万』，会导致无法分配可用内存，也可能是因为数据过大。尝试指针和temp函数结合二进制方法进行辐射定标->指针和temp函数进行定标还是会出错。尝试每1w行循环->失败。尝试每2000行循环->成功

//3.4
虽然每2000行循环定标成功，但是这种方式并不会因为定标系数是浮点而改变原矩阵的数据类型，故需要优化。尝试采用逐行循环+矩阵自增进行全色的定标->逐行循环太慢，考虑将全色分解为10部分->卡住，放弃所有二进制数据处理方式，回滚至ENVI接口处理

//3.5
gf6的『QUAC结果处以一万』采用ENVIRaster的getdata依然会内存不足，暂时删除scale关键字。新增控制台打印的关键字，实时打印IO进程。
